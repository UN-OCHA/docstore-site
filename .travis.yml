dist: focal
language: php
cache:
  directories:
  - $HOME/.composer
  - $HOME/.npm
env:
  - SITEID=docstore

php:
  - 8.0

# Make sure we have a recent version of docker-compose.
addons:
  apt:
    packages:
      - docker-compose

mysql:
  database: drupal
  username: root
  encoding: utf8

services:
  - docker

before_script:
  # Ensure the PHP environment is ready.
  - phpenv rehash

  # Install the AWS CLI and login to the ECR. Credentials are secrets set via the UI.
  - if ! [ -x "$(command -v aws)" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" ; unzip awscliv2.zip ; sudo ./aws/install ; fi
  - aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin public.ecr.aws/unocha

  # Check the docker images we want actually exists.
  - grep 'unocha/unified-builder:' docker/Dockerfile | awk '{print $2}' | xargs docker pull
  - grep 'unocha/php-k8s:' docker/Dockerfile | awk '{print $2}' | xargs docker pull

  # Get docker information.
  - docker version
  - docker-compose version

  # Ensure the PHP environment is ready.
  - phpenv rehash

script:
  - set -e
  # PHP linting
  - test ! -d ./html/modules/custom || find -L ./html/modules/custom -iregex '.*\.\(php\|module\|inc\|install\)$' -print0 | xargs -0 -n 1 -P 4 php -l
  - test ! -d ./html/themes/custom || find -L ./html/themes/custom -iregex '.*\.\(php\|module\|inc\|install\)$' -print0 | xargs -0 -n 1 -P 4 php -l
  - set +e

  # Build local image.
  - make

  # Create the site, solr and mysql containers.
  - docker-compose -f tests/docker-compose.yml up -d

  # Dump some information about the created containers.
  - docker ps -a

  # Wait a bit for solr and mysql to be ready.
  - sleep 10

  # Install the site with the existing config.
  - docker exec -it ${SITEID}-travis-site drush -y si --existing-config

  # Ensure the file directories are writable.
  - docker exec -it ${SITEID}-travis-site chmod -R 777 /srv/www/html/sites/default/files /srv/www/html/sites/default/private

  # Check coding standards.
  - docker exec -it -u appuser -w /srv/www ${SITEID}-travis-site ./vendor/bin/phpcs -p --report=full --standard=phpcs.xml ./html/modules/custom

  # Run API tests.
  - docker exec -it -u appuser -w /srv/www/tests -e HOST="http://${SITEID}-travis-site" -e DRUSH="drush -v"  ${SITEID}-travis-site sh ./run.sh

after_success:
  - cd $TRAVIS_BUILD_DIR
  - killall -9 php
  - echo "The tests completed without errors."

after_failure:
  - echo "The tests failed. Please check the output above for problems."
  - ../vendor/bin/drush watchdog:show --extended
