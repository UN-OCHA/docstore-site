dist: bionic
language: php

php:
  - 8.0

services:
  - docker

# Make sure we have a recent version of docker.
addons:
  apt:
    packages:
      - docker-ce

before_script:
  # Ensure the PHP environment is ready.
  - phpenv rehash

script:
  # Get docker information.
  - docker version
  - docker-compose version

  # PHP linting
  - test ! -d ./html/modules/custom || find -L ./html/modules/custom -iregex '.*\.\(php\|module\|inc\|install\)$' -print0 | xargs -0 -n 1 -P 4 php -l

  # Build local image.
  - make

  # Create the site, solr and mysql containers.
  - docker-compose -f tests/docker-compose.yml up -d

  # Dump some information about the created containers.
  - docker ps -a

  # Wait a bit for solr and mysql to be ready.
  - sleep 10

  # Install the site with the existing config.
  - docker exec -it docstore-travis-site drush -y si --existing-config

  # Ensure the file directories are writable.
  - docker exec -it docstore-travis-site chmod -R 777 /srv/www/html/sites/default/files /srv/www/html/sites/default/private

  # Check coding standards.
  - docker exec -it -u appuser -w /srv/www docstore-travis-site ./vendor/bin/phpcs -p --report=full --standard=phpcs.xml ./html/modules/custom

  # List custom modules (for debugging the tests).
  - docker exec -it docstore-travis-site ls -l /srv/www/html/modules/custom/docstore

  # Test custom drush command.
  - docker exec -it docstore-travis-site drush -v docstore:createTestFile

  # Check if previous command is run.
  - docker exec -it docstore-travis-site echo "Check the previous command is run."

  # Run API tests.
  - docker exec -it -u appuser -w /srv/www/tests -e HOST="http://docstore-travis-site" -e DRUSH="drush -v"  docstore-travis-site sh ./run.sh

after_success:
  - echo "The tests completed without errors."

after_failure:
  - echo "The tests failed. Please check the output above for problems."
  - ../vendor/bin/drush watchdog:show --extended
