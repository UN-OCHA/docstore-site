<?php

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * @file
 * Contains Document Store code.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function docstore_form_field_ui_field_storage_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  //Remove the unnecessary field_ prefix.
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $form['new_storage_wrapper']['field_name']['#field_prefix'] = '<span dir="' . $language->getDirection() . '">';

  // Attach validate function to prevent adding the field_ prefix.
  $form['#validate'][] = 'docstore_form_field_ui_field_overview_form_remove_field_prefix';

  // Increase maximum characters to 32 as per database constraint
  $form['new_storage_wrapper']['field_name']['#maxlength'] = 32;
}

/**
 * Validate function to prevent adding the field_ prefix.
 */
function docstore_form_field_ui_field_overview_form_remove_field_prefix(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

  $field_name = preg_replace('/^field_/', '', $form_state->getValue('field_name'));
  $form_state->setValue('field_name', $field_name);
}

/**
 * Create a document field for a provider.
 */
function docstore_create_document_field_for_provider($label, $field_type, $multiple = FALSE, $provider_prefix = 'shared_') {
  $field_name = docstore_generate_unique_machine_name($label, 'node', $provider_prefix);
  $field_storage = FieldStorageConfig::create([
    'field_name' => $field_name,
    'entity_type' => 'node',
    'type' => $field_type,
    'cardinality' => $multiple ? FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED : 1,
  ]);
  $field_storage->save();

  // Create instance.
  FieldConfig::create([
    'field_storage' => $field_storage,
    'bundle' => 'document',
    'label' => $label,
  ])->save();

  // Add to index.
  docstore_add_document_field_to_index($field_name, $field_type, $label);

  return $field_name;
}

/**
 * Create a document field for a provider.
 */
function docstore_create_document_reference_field_for_provider($label, $bundle, $multiple = FALSE, $provider_prefix = 'shared_') {
  $field_type = 'entity_reference';
  $field_name = docstore_generate_unique_machine_name($label, 'node', $provider_prefix);
  $field_storage = FieldStorageConfig::create([
    'field_name' => $field_name,
    'entity_type' => 'node',
    'type' => $field_type,
    'cardinality' => $multiple ? FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED : 1,
    'settings' => [
      'target_type' => 'taxonomy_term',
    ],
  ]);
  $field_storage->save();

  // Create instance.
  FieldConfig::create([
    'field_storage' => $field_storage,
    'bundle' => 'document',
    'label' => $label,
    'settings' => [
      'handler' => 'default:taxonomy_term',
      'handler_settings' => [
        'target_bundles' => [
          $bundle => $bundle,
        ],
      ],
    ],
  ])->save();

  // Add to index.
  docstore_add_document_field_to_index($field_name, $field_type, $label);

  return $field_name;
}

/**
 * Add field to index.
 */
function docstore_add_document_field_to_index($field_name, $field_type, $label) {
  $field_type_mapping = [
    'string' => 'string',
    'entity_reference' => 'integer',
  ];

  // Skip unknown field types.
  if (!isset($field_type_mapping[$field_type])) {
    return;
  }

  $index = \Drupal\search_api\Entity\Index::load('documents');

  $field = new \Drupal\search_api\Item\Field($index, $field_name);
  $field->setType($field_type_mapping[$field_type]);
  $field->setPropertyPath($field_name);
  $field->setDatasourceId('entity:node');
  $field->setLabel($label);
  $index->addField($field);

  $index->save();

  // Re-index.
  $index->reindex();
}

/**
 * Create a vocabulary for a provider.
 */
function docstore_create_vocabulary_for_provider($label, $provider_prefix = 'shared_') {
  $vid = docstore_generate_unique_machine_name($label, 'taxonomy_vocabulary', $provider_prefix);

  $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
    'vid' => $vid,
    'machine_name' => $vid,
    'name' => $label,
  ));

  $vocabulary->save();

  return $vid;
}

/**
 * Create a vocabulary field for a provider.
 */
function docstore_create_vocabulary_field_for_provider($bundle, $label, $field_type, $multiple = FALSE, $provider_prefix = 'shared_') {
  $field_name = docstore_generate_unique_machine_name($label, 'taxonomy_term', $provider_prefix);
  $field_storage = FieldStorageConfig::create([
    'field_name' => $field_name,
    'entity_type' => 'taxonomy_term',
    'type' => $field_type,
    'cardinality' => $multiple ? FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED : 1,
  ]);
  $field_storage->save();

  // Create instance.
  FieldConfig::create([
    'field_storage' => $field_storage,
    'bundle' => $bundle,
    'label' => $label,
  ])->save();

  return $field_name;
}

/**
 * Generate a unique machine name.
 */
function docstore_generate_unique_machine_name($label, $entity_type, $provider_prefix) {
  $label = strtolower($label);
  $label = preg_replace('/[^a-z0-9_]+/', '_', $label);
  $label = preg_replace('/_+/', '_', $label);
  $label = $provider_prefix . $label;

  $label = trim(substr($label, 0, 31), '_');
  $counter = 0;
  $machine_name = $label;
  while (docstore_machine_name_exists($machine_name, $entity_type)) {
    $suffix = '_' . $counter++;
    $machine_name = substr($label, 0, 31 - strlen($suffix)) . $suffix;
  }
  return $machine_name;
}

/**
 * Check if a machine name already exists.
 */
function docstore_machine_name_exists($machine_name, $entity_type) {
  $field = FieldStorageConfig::loadByName($entity_type, $machine_name);

  return !empty($field);
}
