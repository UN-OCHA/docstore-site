<?php

/**
 * @file
 * Contains Document Store code.
 */

use Drupal\Component\Uuid\Uuid;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Item\Field;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

use Solarium\Core\Query\QueryInterface;
use Drupal\search_api\Query\QueryInterface as search_apiQueryInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function docstore_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove the unnecessary field_ prefix.
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $form['new_storage_wrapper']['field_name']['#field_prefix'] = '<span dir="' . $language->getDirection() . '">';

  // Attach validate function to prevent adding the field_ prefix.
  $form['#validate'][] = 'docstore_form_field_ui_field_overview_form_remove_field_prefix';

  // Increase maximum characters to 32 as per database constraint.
  $form['new_storage_wrapper']['field_name']['#maxlength'] = 32;
}

/**
 * Validate function to prevent adding the field_ prefix.
 */
function docstore_form_field_ui_field_overview_form_remove_field_prefix(&$form, FormStateInterface $form_state) {
  $field_name = preg_replace('/^field_/', '', $form_state->getValue('field_name'));
  $form_state->setValue('field_name', $field_name);
}

/**
 * Implements hook_search_api_solr_converted_query_alter().
 */
function docstore_search_api_solr_converted_query_alter(QueryInterface $solarium_query, search_apiQueryInterface $query) {
  /** @var \Solarium\QueryType\Select\Query\Query $solarium_query */
  foreach ($solarium_query->getFilterQueries() as &$filter) {
    $parts = explode(':', $filter->getQuery());
    // Has to be a label.
    if (strpos($parts[0], '_label')) {
      // Is is a wildcard?
      if (strpos($parts[1], '*"')) {
        // No spaces allowed.
        if (!strpos($parts[1], ' ')) {
          $parts[1] = str_replace('"', '', $parts[1]);
          $filter->setQuery(implode(':', $parts));
        }
      }
    }
  }
}

/**
 * Setup testing.
 */
function _docstore_setup_testing() {
  // Delete all documents.
  $documents = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'document']);
  \Drupal::entityTypeManager()->getStorage('node')->delete($documents);

  // Delete all terms.
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('taxonomy_term')->delete($terms);

  // Delete all vocabularies.
  $vocabularies = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->delete($vocabularies);

  // Delete all media.
  $media = \Drupal::entityTypeManager()->getStorage('media')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('media')->delete($media);

  // Delete all files.
  $file = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('file')->delete($file);

  // Delete document fields.
  /* @var $entityFieldManager Drupal\Core\Entity\EntityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');
  $fields = $entityFieldManager->getFieldDefinitions('node', 'document');

  // Remove fields we need.
  unset($fields['nid']);
  unset($fields['uuid']);
  unset($fields['vid']);
  unset($fields['langcode']);
  unset($fields['type']);
  unset($fields['revision_timestamp']);
  unset($fields['revision_uid']);
  unset($fields['revision_log']);
  unset($fields['status']);
  unset($fields['uid']);
  unset($fields['title']);
  unset($fields['created']);
  unset($fields['changed']);
  unset($fields['promote']);
  unset($fields['sticky']);
  unset($fields['default_langcode']);
  unset($fields['revision_default']);
  unset($fields['revision_translation_affected']);
  unset($fields['base_author_hid']);
  unset($fields['base_files']);

  foreach ($fields as $field_name => $field_info) {
    FieldStorageConfig::loadByName('node', $field_name)->delete();
  }

  // Reset index.
  $config_path = drupal_get_path('module', 'docstore') . '/config/install/search_api.index.documents.yml';
  $data = Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable('search_api.index.documents')->setData($data)->save(TRUE);

  // Create user if needed.
  if (!User::load(2)) {
    User::create([
      'uid' => 2,
      'status' => 1,
      'name' => 'Silk test',
      'type' => 'provider',
      'pass' => '',
      'prefix' => [
        'value' => 'silk_',
      ],
      'api_keys' => [
        'value' => 'abcd',
      ],
      'api_keys_read_only' => [
        'value' => 'xyzzy',
      ],
    ])->save();
  }

  // Invalidate caches.
  Cache::invalidateTags(['documents']);
  Cache::invalidateTags(['document_fields']);
}
