<?php

/**
 * @file
 * Contains Document Store code.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\docstore\ManageFields;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\NodeType;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Query\QueryInterface as SearchApiQueryInterface;
use Drupal\search_api_solr\SolrBackendInterface;
use Drupal\user\Entity\User;
use Drupal\webhooks\Webhook;
use Symfony\Component\VarDumper\Cloner\VarCloner;
use Symfony\Component\VarDumper\Dumper\CliDumper;
use Symfony\Component\Yaml\Yaml;
use Solarium\Core\Query\QueryInterface as SolariumQueryInterface;

/**
 * Implements hook_file_download().
 */
function docstore_file_download($uri) {
  if (StreamWrapperManager::getScheme($uri) == 'private') {
    if (Drupal::currentUser()->isAnonymous()) {
      return -1;
    }
  }

  return NULL;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function docstore_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove the unnecessary field_ prefix.
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $form['new_storage_wrapper']['field_name']['#field_prefix'] = '<span dir="' . $language->getDirection() . '">';

  // Attach validate function to prevent adding the field_ prefix.
  $form['#validate'][] = 'docstore_form_field_ui_field_overview_form_remove_field_prefix';

  // Increase maximum characters to 32 as per database constraint.
  $form['new_storage_wrapper']['field_name']['#maxlength'] = 32;
}

/**
 * Validate function to prevent adding the field_ prefix.
 */
function docstore_form_field_ui_field_overview_form_remove_field_prefix(&$form, FormStateInterface $form_state) {
  $field_name = preg_replace('/^field_/', '', $form_state->getValue('field_name'));
  $form_state->setValue('field_name', $field_name);
}

/**
 * Implements hook_search_api_solr_converted_query_alter().
 */
function docstore_search_api_solr_converted_query_alter(SolariumQueryInterface $solarium_query, SearchApiQueryInterface $query) {
  /** @var \Solarium\QueryType\Select\Query\Query $solarium_query */
  foreach ($solarium_query->getFilterQueries() as &$filter) {
    $parts = explode(':', $filter->getQuery());
    // Has to be the title or a label.
    if ($parts[0] === 'ss_title' || strpos($parts[0], '_label')) {
      // Is it a wildcard?
      if (strpos($parts[1], '*"')) {
        // No spaces allowed.
        if (!strpos($parts[1], ' ')) {
          $parts[1] = str_replace('"', '', $parts[1]);
          $filter->setQuery(implode(':', $parts));
        }
      }
    }
  }
}

/**
 * Setup testing.
 */
function _docstore_setup_testing() {
  // Delete all nodes.
  $documents = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('node')->delete($documents);

  // Delete all node types.
  $node_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('node_type')->delete($node_types);

  // Delete all terms.
  // @todo skip shared vocabularies.
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('taxonomy_term')->delete($terms);

  // Delete all vocabularies.
  // @todo skip shared vocabularies.
  $vocabularies = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->delete($vocabularies);

  // Delete all media.
  $media = \Drupal::entityTypeManager()->getStorage('media')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('media')->delete($media);

  // Delete all files.
  $file = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('file')->delete($file);

  // Delete document fields.
  /** @var \Drupal\Core\Entity\EntityFieldManager $entityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  // @todo Reset node types.
  $node_types = _docstore_get_defined_node_types();

  foreach ($node_types as $node_type) {
    $fields = $entityFieldManager->getFieldDefinitions('node', $node_type);

    // Remove fields we need.
    unset($fields['nid']);
    unset($fields['uuid']);
    unset($fields['vid']);
    unset($fields['langcode']);
    unset($fields['type']);
    unset($fields['revision_timestamp']);
    unset($fields['revision_uid']);
    unset($fields['revision_log']);
    unset($fields['status']);
    unset($fields['uid']);
    unset($fields['title']);
    unset($fields['created']);
    unset($fields['changed']);
    unset($fields['promote']);
    unset($fields['sticky']);
    unset($fields['default_langcode']);
    unset($fields['revision_default']);
    unset($fields['revision_translation_affected']);
    unset($fields['author']);
    unset($fields['files']);
    unset($fields['private']);

    foreach ($fields as $field_name => $field_info) {
      if (FieldStorageConfig::loadByName('node', $field_name)) {
        FieldStorageConfig::loadByName('node', $field_name)->delete();
      }
    }
  }

  // Reset documents index.
  $config_path = drupal_get_path('module', 'docstore') . '/config/install/search_api.index.documents.yml';
  $data = Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable('search_api.index.documents')->setData($data)->save(TRUE);

  $index = Index::load('documents');
  $index->clear();

  $server = $index->getServerInstance();
  $solr = $server->getBackend();
  if ($solr instanceof SolrBackendInterface) {
    $connector = $solr->getSolrConnector();
    $update_query = $connector->getUpdateQuery();
    $update_query->addDeleteQuery('*:*');
    $connector->update($update_query);
  }

  // Reset terms index.
  $config_path = drupal_get_path('module', 'docstore') . '/config/install/search_api.index.terms.yml';
  $data = Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable('search_api.index.terms')->setData($data)->save(TRUE);

  $index = Index::load('terms');
  $index->clear();

  $server = $index->getServerInstance();
  $solr = $server->getBackend();
  if ($solr instanceof SolrBackendInterface) {
    $connector = $solr->getSolrConnector();
    $update_query = $connector->getUpdateQuery();
    $update_query->addDeleteQuery('*:*');
    $connector->update($update_query);
  }

  // Remove webhooks.
  /** @var \Drupal\webhooks\WebhooksService $webhooks_service */
  $webhooks_service = \Drupal::service('webhooks.service');
  $webhook_configs = $webhooks_service->loadMultipleByEvent(':');

  foreach ($webhook_configs as $webhook_config) {
    $webhook_config->delete();
  }

  // Create user if needed.
  if (!User::load(2)) {
    User::create([
      'uid' => 2,
      'status' => 1,
      'name' => 'Base provider',
      'type' => 'provider',
      'pass' => '',
      'prefix' => [
        'value' => '',
      ],
    ])->save();
  }

  if (!User::load(3)) {
    User::create([
      'uid' => 3,
      'status' => 1,
      'name' => 'Silk test',
      'type' => 'provider',
      'pass' => '',
      'prefix' => [
        'value' => 'silk_',
      ],
      'api_keys' => [
        'value' => 'abcd',
      ],
      'api_keys_read_only' => [
        'value' => 'xyzzy',
      ],
      'dropfolder' => [
        'value' => '../drop_folders/silk',
      ],
      'shared_secret' => [
        'value' => 'verysecret',
      ],
    ])->save();
  }

  // Create user if needed.
  if (!User::load(4)) {
    User::create([
      'uid' => 4,
      'status' => 1,
      'name' => 'Another test',
      'type' => 'provider',
      'pass' => '',
      'prefix' => [
        'value' => 'another_',
      ],
      'api_keys' => [
        'value' => 'dcba',
      ],
      'api_keys_read_only' => [
        'value' => 'yzzyx',
      ],
    ])->save();
  }

  // Rebuild endpoints and accessible resources.
  \Drupal::service('docstore.document_controller')->rebuildEndpoints();
  \Drupal::service('docstore.document_controller')->rebuildAccessibleResourceTypes('node_type');
  \Drupal::service('docstore.vocabulary_controller')->rebuildAccessibleResourceTypes('taxonomy_vocabulary');

  // Invalidate caches.
  Cache::invalidateTags(['documents']);
  Cache::invalidateTags(['document_fields']);
  Cache::invalidateTags(['terms']);
  Cache::invalidateTags(['vocabularies']);
  Cache::invalidateTags(['vocabulary_fields']);
  Cache::invalidateTags(['media']);
  Cache::invalidateTags(['files']);
  Cache::invalidateTags(['webhooks']);
}

/**
 * Create node type.
 */
function docstore_create_node_type($type = 'document', $endpoint = 'documents') {
  if (NodeType::load($type)) {
    return;
  }

  $provider = user_load(2);
  $manager = new ManageFields($provider, $type, Drupal::service('entity_field.manager'), Drupal::service('entity_type.manager'), Drupal::service('database'));
  $manager->createDocumentType([
    'label' => ucfirst($type),
    'machine_name' => $type,
    'endpoint' => $endpoint,
    'author' => 'common',
    'fields_allowed' => TRUE,
    'content_allowed' => TRUE,
    'shared' => TRUE,
  ]);
}

/**
 * Implements hook_webhooks_event_info_alter().
 */
function docstore_webhooks_event_info_alter(&$options) {
  $entities = [
    'vocabulary',
    'term',
    'media',
    'file',
    'field:document',
    'field:vocabulary',
  ];

  $entities = array_merge($entities, _docstore_get_defined_node_types());

  $actions = [
    'create',
    'read',
    'update',
    'delete',
  ];

  $options = [];
  foreach ($entities as $entity) {
    foreach ($actions as $action) {
      $options[$entity . ':' . $action] = [
        'type' => 'Hook: ' . ucfirst($entity),
        'event' => $entity . ':' . $action,
      ];
    }
  }
}

/**
 * Notify webhooks.
 */
function docstore_notify_webhooks($event, $payload) {
  drupal_register_shutdown_function('_docstore_trigger_webhooks', $event, $payload);
}

/**
 * Trigger webhooks.
 */
function _docstore_trigger_webhooks($event, $payload) {
  /** @var \Drupal\webhooks\WebhooksService $webhooks_service */
  $webhooks_service = \Drupal::service('webhooks.service');
  $webhook_configs = $webhooks_service->loadMultipleByEvent($event);

  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhook_config */
  foreach ($webhook_configs as $webhook_config) {
    $webhook = new Webhook(
      [
        'event' => $event,
        'payload' => $payload,
      ],
      [],
      $event,
      'application/json'
    );

    $webhooks_service->send($webhook_config, $webhook);
  }
}

/**
 * Get allowed API end points.
 */
function _docstore_get_allowed_api_endpoints() {
  // @todo read from config.
  $config = [
    'any' => [
      'read' => 'document',
      'write' => FALSE,
      'field' => FALSE,
    ],
    'documents' => [
      'read' => 'document',
      'write' => 'document',
      'field' => 'document',
    ],
    'assessments' => [
      'read' => 'assessment',
      'write' => 'assessment',
      'field' => 'assessment',
    ],
    'disasters' => [
      'read' => 'disaster',
      'write' => 'disaster',
      'field' => 'disaster',
    ],
    'assessment-documents' => [
      'read' => 'assessment_document',
      'write' => 'assessment_document',
      'field' => 'assessment_document',
    ],
    'knowledge-managements' => [
      'read' => 'knowledge_management',
      'write' => 'knowledge_management',
      'field' => 'knowledge_management',
    ],
  ];

  return $config;
}

/**
 * Get allowed node types.
 */
function _docstore_get_defined_node_types() {
  // @todo read from config.
  $config = [
    'document',
    'disaster',
    'assessment',
    'assessment_document',
    'knowledge_management',
  ];

  return $config;
}

/**
 * Implements hook_theme_registry_alter().
 */
function docstore_theme_registry_alter(&$theme_registry) {
  if (!isset($theme_registry['taxonomy_term'])) {
    return;
  }

  $module_path = drupal_get_path('module', 'docstore');
  $theme_registry['taxonomy_term']['path'] = $module_path . '/templates';
  $theme_registry['taxonomy_term']['theme path'] = $module_path;
}

/**
 * Rebuild index fields.
 */
function docstore_rebuild_index_fields($machine_name = 'assessment') {
  // Reset index.
  $config_path = drupal_get_path('module', 'docstore') . '/config/install/search_api.index.documents.yml';
  $data = Yaml::parseFile($config_path);

  $uuid_service = \Drupal::service('uuid');
  $data['uuid'] = $uuid_service->generate();
  $data['id'] = 'documents_' . $machine_name;
  $data['name'] = 'Index for ' . $machine_name;
  $data['datasource_settings']['entity:node']['bundles']['default'] = FALSE;
  $data['datasource_settings']['entity:node']['bundles']['selected'] = [$machine_name];
  \Drupal::configFactory()->getEditable('search_api.index.documents_' . $machine_name)->setData($data)->save(TRUE);

  $index = Index::load('documents_' . $machine_name);
  $index->clear();

  $entityFieldManager = Drupal::service('entity_field.manager');
  $provider = user_load(2);
  $manager = new ManageFields($provider, '', Drupal::service('entity_field.manager'), Drupal::service('entity_type.manager'), Drupal::service('database'));

  $map = $entityFieldManager->getFieldDefinitions('node', $machine_name);

  // Remove fields we need.
  unset($map['nid']);
  unset($map['uuid']);
  unset($map['vid']);
  unset($map['langcode']);
  unset($map['type']);
  unset($map['revision_timestamp']);
  unset($map['revision_uid']);
  unset($map['revision_log']);
  unset($map['status']);
  unset($map['uid']);
  unset($map['title']);
  unset($map['created']);
  unset($map['changed']);
  unset($map['promote']);
  unset($map['sticky']);
  unset($map['default_langcode']);
  unset($map['revision_default']);
  unset($map['revision_translation_affected']);
  unset($map['author']);
  unset($map['files']);
  unset($map['private']);

  // Add to search index display.
  $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');

  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
  $view_display = $storage->load('node.' . $machine_name . '.search_index');
  if (!$view_display) {
    $view_display = EntityViewDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => $machine_name,
      'mode' => 'search_index',
      'status' => TRUE,
    ]);
  }

  // Make sure it's active.
  if (!$view_display->status()) {
    $view_display->setStatus(TRUE);
  }

  foreach ($map as $field_name => $field_info) {
    $view_display->setComponent($field_name, [
      'type' => 'number_unformatted',
      'settings' => [],
    ]);

    // Skip common fields, added using config.
    if ($field_info->getFieldStorageDefinition()->getThirdPartySetting('docstore', 'common') === TRUE) {
      continue;
    }

    $field_type = $field_info->getType();
    if ($field_info->getType() === 'entity_reference_uuid') {
      if ($field_info->getFieldStorageDefinition()->get('settings')['target_type'] === 'node') {
        $field_type = 'node_reference';
      }
      else {
        $field_type = 'term_reference';
      }
    }

    // Add to index.
    $manager->addDocumentFieldToIndex($field_info, $field_type, $field_info->getLabel());
  }

  $view_display->save();
}

/**
 * Debug helper to dump a variable into a string.
 *
 * This handles complex data as opposed to `print_r` or `var_dump`.
 *
 * @param mixed $variable
 *   Variable to dump to a string.
 * @param string $id
 *   Id of the log. If not defined, the dump will not be logged.
 *
 * @return string
 *   String representation of the variable.
 */
function _docstore_vardump($variable, $id = '_docstore_vardump') {
  $cloner = new VarCloner();
  $dumper = new CliDumper();
  $output = '';

  $dumper->dump($cloner->cloneVar($variable), function ($line, $depth) use (&$output) {
    // A negative depth means "end of dump".
    if ($depth >= 0) {
      // Adds a two spaces indentation to the line.
      $output .= str_repeat('  ', $depth) . $line . "\n";
    }
  });

  if (!empty($id)) {
    \Drupal::logger($id)->notice($output);
  }
  return $output;
}

/**
 * Implements hook_search_api_solr_documents_alter().
 *
 * Add lower-case label for terms.
 */
function docstore_search_api_solr_documents_alter(&$documents, IndexInterface $index, $items) {
  if ($index->id() !== 'terms') {
    return;
  }

  foreach ($documents as &$document) {
    if (isset($document->ss_name)) {
      $document->setField('ss_label', mb_strtolower($document->ss_name));
    }
  }
}

/**
 * Update operations on assessments.
 */
function docstore_update_assessments($url = '') {
  if (empty($url)) {
    $url = 'https://www.humanitarianresponse.info/api/v1.0/assessments';
  }

  $raw = file_get_contents($url);
  $data = json_decode($raw);

  foreach ($data->data as $row) {
    $needs_save = FALSE;
    $id = $row->id;

    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $entities = $storage->loadByProperties([
      'type' => 'assessment',
      'id' => $id,
    ]);

    /** @var \Drupal\node\Entity\Node */
    $node = $entities ? reset($entities) : NULL;

    if (!$node) {
      continue;
    }

    if (isset($row->operation)) {
      if ($node->hasField('operations') && $node->get('operations')->isEmpty()) {
        $data_operation = [];
        foreach ($row->operation as $operation) {
          if (!empty($operation)) {
            $entities = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
              'vid' => 'operations',
              'id' => $operation->id,
            ]);
            $term = $entities ? reset($entities) : NULL;
            if ($term) {
              $data_operation[] = $term->uuid();
            }
          }
        }

        if (!empty($data_operation)) {
          $needs_save = TRUE;
          $node->set('operations', $data_operation);
        }
      }
    }

    if (isset($row->disasters)) {
      if ($node->hasField('disasters') && $node->get('disasters')->isEmpty()) {
        $data_disasters = [];
        foreach ($row->disasters as $disaster) {
          if (!empty($disaster)) {
            $entities = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
              'type' => 'disaster',
              'glide' => $disaster->glide,
            ]);
            $term = $entities ? reset($entities) : NULL;
            if ($term) {
              $data_disasters[] = $term->uuid();
            }
          }
        }

        if (!empty($data_disasters)) {
          $needs_save = TRUE;
          $node->set('disasters', $data_disasters);
        }
      }
    }

    if ($needs_save) {
      $node->save();
    }
  }

  // Check for more data.
  if (isset($data->next->href)) {
    print $data->next->href;
    docstore_update_assessments($data->next->href);
  }
}
