<?php

/**
 * @file
 * Contains Document Store code.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\NodeType;
use Drupal\search_api\Entity\Index;
use Drupal\search_api_solr\SolrBackendInterface;
use Drupal\user\Entity\User;
use Drupal\webhooks\Webhook;
use Symfony\Component\Yaml\Yaml;
use Solarium\Core\Query\QueryInterface;
use Drupal\search_api\Query\QueryInterface as search_apiQueryInterface;

/**
 * Implements hook_file_download().
 */
function docstore_file_download($uri) {
  if (StreamWrapperManager::getScheme($uri) == 'private') {
    if (Drupal::currentUser()->isAnonymous()) {
      return -1;
    }
  }

  return NULL;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function docstore_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove the unnecessary field_ prefix.
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $form['new_storage_wrapper']['field_name']['#field_prefix'] = '<span dir="' . $language->getDirection() . '">';

  // Attach validate function to prevent adding the field_ prefix.
  $form['#validate'][] = 'docstore_form_field_ui_field_overview_form_remove_field_prefix';

  // Increase maximum characters to 32 as per database constraint.
  $form['new_storage_wrapper']['field_name']['#maxlength'] = 32;
}

/**
 * Validate function to prevent adding the field_ prefix.
 */
function docstore_form_field_ui_field_overview_form_remove_field_prefix(&$form, FormStateInterface $form_state) {
  $field_name = preg_replace('/^field_/', '', $form_state->getValue('field_name'));
  $form_state->setValue('field_name', $field_name);
}

/**
 * Implements hook_search_api_solr_converted_query_alter().
 */
function docstore_search_api_solr_converted_query_alter(QueryInterface $solarium_query, search_apiQueryInterface $query) {
  /** @var \Solarium\QueryType\Select\Query\Query $solarium_query */
  foreach ($solarium_query->getFilterQueries() as &$filter) {
    $parts = explode(':', $filter->getQuery());
    // Has to be the title or a label.
    if ($parts[0] === 'ss_title' || strpos($parts[0], '_label')) {
      // Is it a wildcard?
      if (strpos($parts[1], '*"')) {
        // No spaces allowed.
        if (!strpos($parts[1], ' ')) {
          $parts[1] = str_replace('"', '', $parts[1]);
          $filter->setQuery(implode(':', $parts));
        }
      }
    }
  }
}

/**
 * Setup testing.
 */
function _docstore_setup_testing() {
  // Delete all nodes.
  $documents = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('node')->delete($documents);

  // Delete all terms.
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('taxonomy_term')->delete($terms);

  // Delete all vocabularies.
  $vocabularies = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->delete($vocabularies);

  // Delete all media.
  $media = \Drupal::entityTypeManager()->getStorage('media')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('media')->delete($media);

  // Delete all files.
  $file = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple();
  \Drupal::entityTypeManager()->getStorage('file')->delete($file);

  // Delete document fields.
  /* @var $entityFieldManager Drupal\Core\Entity\EntityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  // TODO: Get from config.
  $node_types = _docstore_get_defined_node_types();

  foreach ($node_types as $node_type) {
    $fields = $entityFieldManager->getFieldDefinitions('node', $node_type);

    // Remove fields we need.
    unset($fields['nid']);
    unset($fields['uuid']);
    unset($fields['vid']);
    unset($fields['langcode']);
    unset($fields['type']);
    unset($fields['revision_timestamp']);
    unset($fields['revision_uid']);
    unset($fields['revision_log']);
    unset($fields['status']);
    unset($fields['uid']);
    unset($fields['title']);
    unset($fields['created']);
    unset($fields['changed']);
    unset($fields['promote']);
    unset($fields['sticky']);
    unset($fields['default_langcode']);
    unset($fields['revision_default']);
    unset($fields['revision_translation_affected']);
    unset($fields['base_author_hid']);
    unset($fields['base_files']);
    unset($fields['base_private']);

    foreach ($fields as $field_name => $field_info) {
      if (FieldStorageConfig::loadByName('node', $field_name)) {
        FieldStorageConfig::loadByName('node', $field_name)->delete();
      }
    }
  }

  // Reset index.
  $config_path = drupal_get_path('module', 'docstore') . '/config/install/search_api.index.documents.yml';
  $data = Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable('search_api.index.documents')->setData($data)->save(TRUE);

  $index = Index::load('documents');
  $index->clear();

  $server = $index->getServerInstance();
  $solr = $server->getBackend();
  if ($solr instanceof SolrBackendInterface) {
    $connector = $solr->getSolrConnector();
    $update_query = $connector->getUpdateQuery();
    $update_query->addDeleteQuery('*:*');
    $connector->update($update_query);
  }

  // Remove webhooks.
  /** @var \Drupal\webhooks\WebhooksService $webhooks_service */
  $webhooks_service = \Drupal::service('webhooks.service');
  $webhook_configs = $webhooks_service->loadMultipleByEvent(':');

  foreach ($webhook_configs as $webhook_config) {
    $webhook_config->delete();
  }

  // Create user if needed.
  if (!User::load(2)) {
    User::create([
      'uid' => 2,
      'status' => 1,
      'name' => 'Silk test',
      'type' => 'provider',
      'pass' => '',
      'prefix' => [
        'value' => 'silk_',
      ],
      'api_keys' => [
        'value' => 'abcd',
      ],
      'api_keys_read_only' => [
        'value' => 'xyzzy',
      ],
      'dropfolder' => [
        'value' => '../drop_folders/silk',
      ],
      'shared_secret' => [
        'value' => 'verysecret',
      ],
    ])->save();
  }

  // Create user if needed.
  if (!User::load(3)) {
    User::create([
      'uid' => 3,
      'status' => 1,
      'name' => 'Another test',
      'type' => 'provider',
      'pass' => '',
      'prefix' => [
        'value' => 'another_',
      ],
      'api_keys' => [
        'value' => 'dcba',
      ],
      'api_keys_read_only' => [
        'value' => 'yzzyx',
      ],
    ])->save();
  }

  // Invalidate caches.
  Cache::invalidateTags(['documents']);
  Cache::invalidateTags(['webhooks']);
  Cache::invalidateTags(['document_fields']);
}

/**
 * Create node type.
 */
function docstore_create_node_type($type = 'document') {
  if (NodeType::load($type)) {
    return;
  }

  $node_type = NodeType::create([
    'type' => $type,
    'name' => ucfirst($type),
  ]);

  $node_type->save();

  // Add base fields.
  $base_fields = [
    'base_author_hid',
    'base_files',
    'base_private',
  ];

  foreach ($base_fields as $base_field) {
    $field_storage = FieldStorageConfig::loadByName('node', $base_field);

    // Create instance.
    FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $type,
      'label' => $base_field,
    ])->save();

    // Add to search index display.
    $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');
    $view_display = $storage->load('node.' . $type . '.search_index');

    if (!$view_display) {
      $view_display = EntityViewDisplay::create([
        'targetEntityType' => 'node',
        'bundle' => $type,
        'mode' => 'search_index',
        'status' => TRUE,
      ]);
    }

    $view_display->setComponent($base_field, [
      'type' => 'number_unformatted',
      'settings' => [],
    ])->save();
  }
}

/**
 * Implements hook_webhooks_event_info_alter().
 */
function docstore_webhooks_event_info_alter(&$options) {
  $entities = [
    'vocabulary',
    'term',
    'media',
    'file',
    'field:document',
    'field:vocabulary',
  ];

  $entities = array_merge($entities, _docstore_get_defined_node_types());

  $actions = [
    'create',
    'read',
    'update',
    'delete',
  ];

  $options = [];
  foreach ($entities as $entity) {
    foreach ($actions as $action) {
      $options[$entity . ':' . $action] = [
        'type' => 'Hook: ' . ucfirst($entity),
        'event' => $entity . ':' . $action,
      ];
    }
  }
}

/**
 * Notify webhooks.
 */
function docstore_notify_webhooks($event, $payload) {
  drupal_register_shutdown_function('_docstore_trigger_webhooks', $event, $payload);
}

/**
 * Trigger webhooks.
 */
function _docstore_trigger_webhooks($event, $payload) {
  /** @var \Drupal\webhooks\WebhooksService $webhooks_service */
  $webhooks_service = \Drupal::service('webhooks.service');
  $webhook_configs = $webhooks_service->loadMultipleByEvent($event);

  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhook_config */
  foreach ($webhook_configs as $webhook_config) {
    $webhook = new Webhook(
      [
        'event' => $event,
        'payload' => $payload,
      ],
      [],
      $event,
      'application/json'
    );

    $webhooks_service->send($webhook_config, $webhook);
  }
}

/**
 * Get allowed API end points.
 */
function _docstore_get_allowed_api_endpoints() {
  // TODO: read from config.
  $config = [
    'any' => [
      'read' => 'document',
      'write' => FALSE,
      'field' => FALSE,
    ],
    'documents' => [
      'read' => 'document',
      'write' => 'document',
      'field' => 'document',
    ],
    'assessments' => [
      'read' => 'assessment',
      'write' => 'assessment',
      'field' => 'assessment',
    ],
  ];

  return $config;
}

/**
 * Get allowed node types.
 */
function _docstore_get_defined_node_types() {
  // TODO: read from config.
  $config = [
    'document',
    'assessment',
  ];

  return $config;
}
